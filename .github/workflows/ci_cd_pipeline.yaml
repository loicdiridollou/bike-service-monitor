name: CI/CD Pipeline for Bike Service Monitor
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  build_and_deploy:
    name: Linting, testing and deploying
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2"
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: "Linting"
        run: |
          pylint src; pylint application
      - name: "Testing"
        env:
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        run: |
          pytest src
      - name: Code coverage
        env:
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        run: |
          coverage run -m --source application,src pytest src application;
          coverage json --omit="**/tests/*"
          VARIABLE=$(python -c "import json; print(round(json.load(open('coverage.json', 'rb'))['totals']['percent_covered'], 2))")
          echo "::set-output name=total::$VARIABLE";
          if (( $(echo "$VARIABLE <= 50" | bc -l) )) ; then
            echo "::set-output name=color::red"
          elif (( $(echo "$VARIABLE > 80" | bc -l) )); then
            echo "::set-output name=color::green"
          else
            echo "::set-output name=color::orange"
          fi
        id: step1
      - name: Create the Badge
        uses: loicdiridollou/dyn-badge-action@main
        with:
          secret: ${{ secrets.GIST_SECRET }}
          gist_id: 5da5399bcd13f130899b1f9334c9ae96
          filename: coverage_bike_service_monitor.json
          message: Code coverage
          color: ${{ steps.step1.outputs.color }}
          value: ${{ steps.step1.outputs.total }}
          user: loicdiridollou
      - name: Deploying to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        if: success()
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: bike-service-monitor
          heroku_email: loic.diridollou@gmail.com
      - name: Login to Jira
        uses: atlassian/gajira-login@master
        if: failure()
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      - name: Create issue if build fails
        id: create_fail 
        uses: atlassian/gajira-create@master
        if: failure()
        with:
          project: BSM
          issuetype: Task
          summary: |
            CI/CD failed for ${{ github.repository }} at ${{ github.sha }}
          description: |
            Comparegtrwhvtr
