name: CI/CD Pipeline for Bike Service Monitor
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
jobs:
  build_and_deploy:
    name: Linting, testing and deploying
    runs-on: ubuntu-latest
    steps:
      - uses: "actions/checkout@v2"
      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: 3.12
      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .
      - name: "Formatting"
        run: |
          ruff format bms --check; ruff format application --check
      - name: "Linting"
        run: |
          pylint bms; pylint application
      - name: "Testing"
        env:
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        run: |
          pytest bms
      - name: Code coverage
        env:
          EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
        run: |
          coverage run -m --source application,bms pytest bms application;
          coverage json --omit="**/tests/*"
          VARIABLE=$(python -c "import json; print(str(round(json.load(open('coverage.json', 'rb'))['totals']['percent_covered'], 2))+'%')")
          echo "name=total::$VARIABLE" >> $GITHUB_OUTPUT
          if (( $(echo "$VARIABLE <= 50" | bc -l) )) ; then
            echo "name=color::red" >> $GITHUB_OUTPUT
          elif (( $(echo "$VARIABLE > 80" | bc -l) )); then
            echo "name=color::green" >> $GITHUB_OUTPUT
          else
            echo "name=color::orange" >> $GITHUB_OUTPUT
          fi
          rm .coverage coverage.json
        id: step1
      - name: Create the Badge
        uses: loicdiridollou/dyn-badge-action@main
        with:
          secret: ${{ secrets.GIST_SECRET }}
          gist_id: 5da5399bcd13f130899b1f9334c9ae96
          filename: coverage_bike_service_monitor.json
          message: Code coverage
          color: ${{ steps.step1.outputs.color }}
          value: ${{ steps.step1.outputs.total }}
          user: loicdiridollou
      - name: Login to Jira
        uses: atlassian/gajira-login@master
        if: failure()
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
      - name: Create issue if build fails
        id: create_fail
        uses: atlassian/gajira-create@master
        if: failure()
        with:
          project: BSM
          issuetype: Task
          summary: |
            CI/CD failed for ${{ github.repository }} at ${{ github.sha }}
          description: |
            Comparegtrwhvtr
